<%- include('layout', { title: 'CyberGuard AI Admin', body: `
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
  <!-- System Status Card -->
  <div class="bg-white dark:bg-secondary-800 shadow-md rounded-lg p-6">
    <div class="flex items-center mb-4">
      <div class="bg-green-100 dark:bg-green-900/30 p-3 rounded-full">
        <i class="fa-solid fa-server text-green-600 dark:text-green-400"></i>
      </div>
      <h2 class="ml-4 text-xl font-semibold">System Status</h2>
    </div>
    <div id="systemStatus" class="space-y-4">
      <p class="text-secondary-500"><i class="fa-solid fa-circle-notch fa-spin"></i> Loading status...</p>
    </div>
  </div>
  
  <!-- API Keys Card -->
  <div class="bg-white dark:bg-secondary-800 shadow-md rounded-lg p-6">
    <div class="flex items-center mb-4">
      <div class="bg-blue-100 dark:bg-blue-900/30 p-3 rounded-full">
        <i class="fa-solid fa-key text-blue-600 dark:text-blue-400"></i>
      </div>
      <h2 class="ml-4 text-xl font-semibold">API Keys</h2>
    </div>
    <div id="apiKeysStatus" class="space-y-4">
      <p class="text-secondary-500"><i class="fa-solid fa-circle-notch fa-spin"></i> Checking API keys...</p>
    </div>
  </div>
  
  <!-- Quick Actions Card -->
  <div class="bg-white dark:bg-secondary-800 shadow-md rounded-lg p-6">
    <div class="flex items-center mb-4">
      <div class="bg-purple-100 dark:bg-purple-900/30 p-3 rounded-full">
        <i class="fa-solid fa-bolt text-purple-600 dark:text-purple-400"></i>
      </div>
      <h2 class="ml-4 text-xl font-semibold">Quick Actions</h2>
    </div>
    <div class="space-y-3">
      <a href="/admin/chat" class="block p-3 bg-secondary-50 dark:bg-secondary-700 hover:bg-secondary-100 dark:hover:bg-secondary-600 rounded-lg transition duration-150">
        <div class="flex items-center">
          <i class="fa-solid fa-comments text-primary-500 mr-3"></i>
          <span>Test Chat Interface</span>
        </div>
      </a>
      <a href="/admin/security" class="block p-3 bg-secondary-50 dark:bg-secondary-700 hover:bg-secondary-100 dark:hover:bg-secondary-600 rounded-lg transition duration-150">
        <div class="flex items-center">
          <i class="fa-solid fa-shield-halved text-primary-500 mr-3"></i>
          <span>Security Analysis</span>
        </div>
      </a>
      <a href="/admin/settings" class="block p-3 bg-secondary-50 dark:bg-secondary-700 hover:bg-secondary-100 dark:hover:bg-secondary-600 rounded-lg transition duration-150">
        <div class="flex items-center">
          <i class="fa-solid fa-gear text-primary-500 mr-3"></i>
          <span>Configure Settings</span>
        </div>
      </a>
      <a href="http://localhost:5173" target="_blank" class="block p-3 bg-secondary-50 dark:bg-secondary-700 hover:bg-secondary-100 dark:hover:bg-secondary-600 rounded-lg transition duration-150">
        <div class="flex items-center">
          <i class="fa-solid fa-desktop text-primary-500 mr-3"></i>
          <span>Launch Frontend App</span>
        </div>
      </a>
    </div>
  </div>
</div>

<div class="mt-8 grid grid-cols-1 lg:grid-cols-2 gap-6">
  <!-- AI Model Information -->
  <div class="bg-white dark:bg-secondary-800 shadow-md rounded-lg p-6">
    <div class="flex items-center mb-4">
      <div class="bg-indigo-100 dark:bg-indigo-900/30 p-3 rounded-full">
        <i class="fa-solid fa-robot text-indigo-600 dark:text-indigo-400"></i>
      </div>
      <h2 class="ml-4 text-xl font-semibold">AI Models</h2>
    </div>
    <div id="aiModels" class="mt-4">
      <p class="text-secondary-500"><i class="fa-solid fa-circle-notch fa-spin"></i> Loading AI models...</p>
    </div>
  </div>
  
  <!-- System Information -->
  <div class="bg-white dark:bg-secondary-800 shadow-md rounded-lg p-6">
    <div class="flex items-center mb-4">
      <div class="bg-amber-100 dark:bg-amber-900/30 p-3 rounded-full">
        <i class="fa-solid fa-info-circle text-amber-600 dark:text-amber-400"></i>
      </div>
      <h2 class="ml-4 text-xl font-semibold">System Information</h2>
    </div>
    <div class="space-y-3">
      <div class="flex justify-between">
        <span class="text-secondary-500">Backend:</span>
        <span class="font-medium">Node.js</span>
      </div>
      <div class="flex justify-between">
        <span class="text-secondary-500">WebSocket:</span>
        <span class="font-medium">Socket.IO</span>
      </div>
      <div class="flex justify-between">
        <span class="text-secondary-500">Database:</span>
        <span class="font-medium">SQLite3</span>
      </div>
      <div class="flex justify-between">
        <span class="text-secondary-500">API Port:</span>
        <span class="font-medium">8000</span>
      </div>
      <div class="flex justify-between">
        <span class="text-secondary-500">Environment:</span>
        <span id="environment" class="font-medium">Loading...</span>
      </div>
      <div class="flex justify-between">
        <span class="text-secondary-500">Version:</span>
        <span class="font-medium">1.0.0</span>
      </div>
    </div>
  </div>
</div>
` }) %>

<script>
  // Dashboard scripts
  document.addEventListener('DOMContentLoaded', async function() {
    try {
      // Create an authentication object (this is just for the demo admin UI)
      // In a real-world scenario, we'd implement proper admin authentication
      if (!localStorage.getItem('demo_admin_token')) {
        // Create a demo token for admin UI
        const demoUser = {
          email: 'admin@cyberguard.ai',
          password: 'admin123'
        };
        
        try {
          const loginRes = await fetch('/api/auth/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(demoUser)
          });
          
          if (loginRes.ok) {
            const loginData = await loginRes.json();
            localStorage.setItem('demo_admin_token', loginData.token);
          } else {
            // If login fails, try to register the demo user
            const signupRes = await fetch('/api/auth/signup', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                ...demoUser,
                fullname: 'Admin User'
              })
            });
            
            if (signupRes.ok) {
              const signupData = await signupRes.json();
              localStorage.setItem('demo_admin_token', signupData.token);
            }
          }
        } catch (error) {
          console.error('Authentication error:', error);
        }
      }
      
      const token = localStorage.getItem('demo_admin_token');
      
      // System status update
      const statusRes = await fetch('/api/status');
      const statusData = await statusRes.json();
      
      let statusHTML = `
        <div class="flex justify-between">
          <span class="text-secondary-500">Status:</span>
          <span class="flex items-center font-medium text-green-600">
            <i class="fa-solid fa-circle text-green-500 mr-1 text-xs"></i>
            Operational
          </span>
        </div>
        <div class="flex justify-between">
          <span class="text-secondary-500">Backend Type:</span>
          <span class="font-medium">${statusData.backend}</span>
        </div>
        <div class="flex justify-between">
          <span class="text-secondary-500">Version:</span>
          <span class="font-medium">${statusData.version}</span>
        </div>
        <div class="flex justify-between">
          <span class="text-secondary-500">Uptime:</span>
          <span class="font-medium" id="uptime">Just started</span>
        </div>
      `;
      
      document.getElementById('systemStatus').innerHTML = statusHTML;
      
      // Add WebSocket info
      const wsStatusHTML = `
        <div class="mt-4 p-3 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800/30 rounded-lg flex items-center">
          <i class="fa-solid fa-check-circle text-green-600 dark:text-green-400 mr-2"></i>
          <span>WebSocket server active on port 8000</span>
        </div>
      `;
      document.getElementById('systemStatus').innerHTML += wsStatusHTML;
      
      // Environment update
      if (token) {
        // Config update with token
        try {
          const configRes = await fetch('/api/admin/config', {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });
          
          if (configRes.ok) {
            const configData = await configRes.json();
            document.getElementById('environment').textContent = configData.environment;
            
            // API Keys update
            let apiKeysHTML = ``;
            
            apiKeysHTML += `
              <div class="flex justify-between items-center mb-2">
                <span class="text-secondary-500">OpenRouter API:</span>
                <span class="font-medium ${configData.hasOpenRouterKey ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}">
                  <i class="fa-solid ${configData.hasOpenRouterKey ? 'fa-check' : 'fa-xmark'} mr-1"></i>
                  ${configData.hasOpenRouterKey ? 'Configured' : 'Not configured'}
                </span>
              </div>
            `;
            
            apiKeysHTML += `
              <div class="flex justify-between items-center mb-2">
                <span class="text-secondary-500">VirusTotal API:</span>
                <span class="font-medium ${configData.hasVirusTotalKey ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}">
                  <i class="fa-solid ${configData.hasVirusTotalKey ? 'fa-check' : 'fa-xmark'} mr-1"></i>
                  ${configData.hasVirusTotalKey ? 'Configured' : 'Not configured'}
                </span>
              </div>
            `;
            
            apiKeysHTML += `
              <div class="flex justify-between items-center mt-4">
                <span class="text-secondary-500">Default Model:</span>
                <span class="font-medium">${configData.defaultModel}</span>
              </div>
            `;
            
            const configButton = `
              <a href="/admin/settings" class="mt-4 block w-full py-2 px-4 bg-primary-50 dark:bg-primary-900/30 hover:bg-primary-100 dark:hover:bg-primary-800/30 text-primary-700 dark:text-primary-300 text-center rounded-lg transition">
                <i class="fa-solid fa-gear mr-1"></i> Configure Settings
              </a>
            `;
            
            document.getElementById('apiKeysStatus').innerHTML = apiKeysHTML + configButton;
          }
        } catch (error) {
          console.error('Config error:', error);
        }
        
        // AI Models update
        try {
          const modelsRes = await fetch('/api/admin/models', {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });
          
          if (modelsRes.ok) {
            const modelsData = await modelsRes.json();
            
            if (modelsData.models && modelsData.models.length > 0) {
              let modelsHTML = `
                <div class="overflow-x-auto">
                  <table class="min-w-full divide-y divide-secondary-200 dark:divide-secondary-700">
                    <thead>
                      <tr>
                        <th class="px-3 py-2 text-left text-xs font-medium text-secondary-500 uppercase tracking-wider">Model</th>
                        <th class="px-3 py-2 text-left text-xs font-medium text-secondary-500 uppercase tracking-wider">Context</th>
                        <th class="px-3 py-2 text-left text-xs font-medium text-secondary-500 uppercase tracking-wider">Provider</th>
                      </tr>
                    </thead>
                    <tbody class="divide-y divide-secondary-200 dark:divide-secondary-700">
              `;
              
              // Only show top 5 models
              const topModels = modelsData.models.slice(0, 5);
              
              topModels.forEach(model => {
                modelsHTML += `
                  <tr>
                    <td class="px-3 py-2 whitespace-nowrap text-sm">
                      <div class="font-medium">${model.name || model.id}</div>
                    </td>
                    <td class="px-3 py-2 whitespace-nowrap text-sm">
                      ${model.context_length || 'N/A'}
                    </td>
                    <td class="px-3 py-2 whitespace-nowrap text-sm">
                      ${model.provider || 'Unknown'}
                    </td>
                  </tr>
                `;
              });
              
              modelsHTML += `
                    </tbody>
                  </table>
                </div>
              `;
              
              modelsHTML += `
                <div class="mt-3 text-sm text-secondary-500">
                  ${modelsData.models.length} models available in total
                </div>
              `;
              
              document.getElementById('aiModels').innerHTML = modelsHTML;
            } else {
              document.getElementById('aiModels').innerHTML = `
                <div class="p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800/30 rounded-lg">
                  <p class="text-yellow-700 dark:text-yellow-400">
                    <i class="fa-solid fa-exclamation-triangle mr-2"></i>
                    No AI models available. Please check your OpenRouter API key.
                  </p>
                </div>
              `;
            }
          } else {
            document.getElementById('aiModels').innerHTML = `
              <div class="p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800/30 rounded-lg">
                <p class="text-yellow-700 dark:text-yellow-400">
                  <i class="fa-solid fa-exclamation-triangle mr-2"></i>
                  Unable to fetch AI models. Please check your API key.
                </p>
              </div>
            `;
          }
        } catch (error) {
          console.error('Models error:', error);
          document.getElementById('aiModels').innerHTML = `
            <div class="p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800/30 rounded-lg">
              <p class="text-red-700 dark:text-red-400">
                <i class="fa-solid fa-circle-exclamation mr-2"></i>
                Error loading AI models: ${error.message}
              </p>
            </div>
          `;
        }
      } else {
        // Handle no authentication case
        document.getElementById('apiKeysStatus').innerHTML = `
          <div class="p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800/30 rounded-lg">
            <p class="text-yellow-700 dark:text-yellow-400">
              <i class="fa-solid fa-exclamation-triangle mr-2"></i>
              Authentication required to view API key status
            </p>
          </div>
        `;
        
        document.getElementById('aiModels').innerHTML = `
          <div class="p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800/30 rounded-lg">
            <p class="text-yellow-700 dark:text-yellow-400">
              <i class="fa-solid fa-exclamation-triangle mr-2"></i>
              Authentication required to view AI models
            </p>
          </div>
        `;
      }
      
      // Simulated uptime counter
      let seconds = 0;
      setInterval(() => {
        seconds++;
        
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = seconds % 60;
        
        let uptimeStr = '';
        if (hours > 0) uptimeStr += `${hours}h `;
        if (minutes > 0 || hours > 0) uptimeStr += `${minutes}m `;
        uptimeStr += `${secs}s`;
        
        const uptimeElement = document.getElementById('uptime');
        if (uptimeElement) {
          uptimeElement.textContent = uptimeStr;
        }
      }, 1000);
      
    } catch (error) {
      console.error('Dashboard error:', error);
    }
  });
</script>
